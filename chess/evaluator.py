# Piece values (static values assigned to each piece)
PIECE_VALUES = {
    "p": 100,  # Pawn
    "r": 500,  # Rook
    "n": 320,  # Knight
    "b": 330,  # Bishop
    "q": 900,  # Queen
    "k": 20000,  # King
}

# Piece-square tables (position-specific values for each piece)
PIECE_SQUARE_TABLES = {
    "p": [  # Pawn
        [0, 0, 0, 0, 0, 0, 0, 0],
        [50, 50, 50, 50, 50, 50, 50, 50],
        [10, 10, 20, 30, 30, 20, 10, 10],
        [5, 5, 10, 25, 25, 10, 5, 5],
        [0, 0, 0, 20, 20, 0, 0, 0],
        [5, -5, -10, 0, 0, -10, -5, 5],
        [5, 10, 10, -20, -20, 10, 10, 5],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ],
    "r": [  # Rook
        [0, 0, 0, 0, 0, 0, 0, 0],
        [50, 50, 50, 50, 50, 50, 50, 50],
        [10, 20, 20, 20, 20, 20, 20, 10],
        [5, 10, 10, 10, 10, 10, 10, 5],
        [0, 5, 5, 10, 10, 5, 5, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0],
    ],
    "n": [  # Knight
        [-50, -40, -30, -30, -30, -30, -40, -50],
        [-40, -20, 0, 5, 5, 0, -20, -40],
        [-30, 5, 10, 15, 15, 10, 5, -30],
        [-30, 0, 15, 20, 20, 15, 0, -30],
        [-30, 5, 15, 20, 20, 15, 5, -30],
        [-30, 0, 10, 15, 15, 10, 0, -30],
        [-40, -20, 0, 5, 5, 0, -20, -40],
        [-50, -40, -30, -30, -30, -30, -40, -50],
    ],
    "b": [  # Bishop
        [-20, -10, -10, -10, -10, -10, -10, -20],
        [-10, 0, 5, 10, 10, 5, 0, -10],
        [-10, 5, 10, 15, 15, 10, 5, -10],
        [-10, 10, 15, 20, 20, 15, 10, -10],
        [-10, 10, 15, 20, 20, 15, 10, -10],
        [-10, 5, 10, 15, 15, 10, 5, -10],
        [-10, 0, 5, 10, 10, 5, 0, -10],
        [-20, -10, -10, -10, -10, -10, -10, -20],
    ],
    "q": [  # Queen
        [-20, -10, -10, -5, -5, -10, -10, -20],
        [-10, 0, 5, 0, 0, 5, 0, -10],
        [-10, 5, 10, 10, 10, 10, 5, -10],
        [-5, 0, 10, 10, 10, 10, 0, -5],
        [-5, 0, 10, 10, 10, 10, 0, -5],
        [-10, 5, 10, 10, 10, 10, 5, -10],
        [-10, 0, 5, 0, 0, 5, 0, -10],
        [-20, -10, -10, -5, -5, -10, -10, -20],
    ],
    "k": [  # King
        [-30, -40, -10, -10, -10, -10, -40, -30],
        [-30, -20, 0, 0, 0, 0, -20, -30],
        [-10, 0, 10, 15, 15, 10, 0, -10],
        [-10, 5, 15, 20, 20, 15, 5, -10],
        [-10, 5, 15, 20, 20, 15, 5, -10],
        [-10, 0, 10, 15, 15, 10, 0, -10],
        [-30, -20, 0, 0, 0, 0, -20, -30],
        [-30, -40, -10, -10, -10, -10, -40, -30],
    ],
}

class Evaluator:
    def evaluate(self, board):
        value = 0
        for y in range(8):
            for x in range(8):
                piece = board.board[y][x]
                if piece != " ":
                    piece_type = piece.lower()
                    piece_color = "white" if piece.isupper() else "black"
                    color = 1 if piece_color == "white" else -1
                    value += PIECE_VALUES[piece_type] * color
                    value += PIECE_SQUARE_TABLES[piece_type][7 - y][x] * color
        return value

    def get_king_position(self, board, color):
        for y in range(8):
            for x in range(8):
                if board.board[y][x] == ("K" if color == "white" else "k"):
                    return (y, x)
        return None
